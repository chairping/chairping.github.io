---
layout:    post
title:     "Curl multi学习笔记"
subtitle:  ""
date:       2115-12-24 12:50
---

### curl预定义常量

[libcurl error codes](http://curl.haxx.se/libcurl/c/libcurl-errors.html)

{% highlight php startinline %}  
define ('CURLINFO_PRIVATE', 1048597);                     //
define ('CURL_VERSION_IPV6', 1);                     //
define ('CURL_VERSION_KERBEROS4', 2);                     //
define ('CURL_VERSION_SSL', 4);                     //
define ('CURL_VERSION_LIBZ', 8);                     //
define ('CURLVERSION_NOW', 3);                     //


define ('CURLE_OK', 0);                             //  All fine. Proceed as usual. 
define ('CURLE_UNSUPPORTED_PROTOCOL', 1);           //  The URL you passed to libcurl used a protocol that this libcurl does not support. The support might be a compile-time option that you didn't use, it can be a misspelled protocol string or just a protocol libcurl has no code for. 
define ('CURLE_FAILED_INIT', 2);                     // Very early initialization code failed. This is likely to be an internal error or problem, or a resource problem where something fundamental couldn't get done at init time. 
define ('CURLE_URL_MALFORMAT', 3);                  //  The URL was not properly formatted. 
define ('CURLE_URL_MALFORMAT_USER', 4);                     //
define ('CURLE_COULDNT_RESOLVE_PROXY', 5);          // Couldn't resolve proxy. The given proxy host could not be resolved. 
define ('CURLE_COULDNT_RESOLVE_HOST', 6);           // Couldn't resolve host. The given remote host was not resolved. 
define ('CURLE_COULDNT_CONNECT', 7);                // Failed to connect() to host or proxy. 
define ('CURLE_FTP_WEIRD_SERVER_REPLY', 8);         //  After connecting to a FTP server, libcurl expects to get a certain reply back. This error code implies that it got a strange or bad reply. The given remote server is probably not an OK FTP server. 
define ('CURLE_FTP_ACCESS_DENIED', 9);                     //
define ('CURLE_FTP_USER_PASSWORD_INCORRECT', 10);                     //
define ('CURLE_FTP_WEIRD_PASS_REPLY', 11);                     //After having sent the FTP password to the server, libcurl expects a proper reply. This error code indicates that an unexpected code was returned. 
define ('CURLE_FTP_WEIRD_USER_REPLY', 12);                     //
define ('CURLE_FTP_WEIRD_PASV_REPLY', 13);                     //
define ('CURLE_FTP_WEIRD_227_FORMAT', 14);                     //
define ('CURLE_FTP_CANT_GET_HOST', 15);                     //
define ('CURLE_FTP_CANT_RECONNECT', 16);                     //
define ('CURLE_FTP_COULDNT_SET_BINARY', 17);                     //
define ('CURLE_PARTIAL_FILE', 18);                     // A file transfer was shorter or larger than expected. This happens when the server first reports an expected transfer size, and then delivers data that doesn't match the previously given size. 
define ('CURLE_FTP_COULDNT_RETR_FILE', 19);                     //
define ('CURLE_FTP_WRITE_ERROR', 20);                     //
define ('CURLE_FTP_QUOTE_ERROR', 21);                     //
define ('CURLE_HTTP_NOT_FOUND', 22);                     //
define ('CURLE_WRITE_ERROR', 23);                     //
define ('CURLE_MALFORMAT_USER', 24);                     //
define ('CURLE_FTP_COULDNT_STOR_FILE', 25);                     //
define ('CURLE_READ_ERROR', 26);                     //
define ('CURLE_OUT_OF_MEMORY', 27);                     //
define ('CURLE_OPERATION_TIMEOUTED', 28);                     //
define ('CURLE_FTP_COULDNT_SET_ASCII', 29);                     //
define ('CURLE_FTP_PORT_FAILED', 30);                     //
define ('CURLE_FTP_COULDNT_USE_REST', 31);                     //
define ('CURLE_FTP_COULDNT_GET_SIZE', 32);                     //
define ('CURLE_HTTP_RANGE_ERROR', 33);                     //
define ('CURLE_HTTP_POST_ERROR', 34);                     //
define ('CURLE_SSL_CONNECT_ERROR', 35);                     //
define ('CURLE_FTP_BAD_DOWNLOAD_RESUME', 36);                     //
define ('CURLE_FILE_COULDNT_READ_FILE', 37);                     //
define ('CURLE_LDAP_CANNOT_BIND', 38);                     //
define ('CURLE_LDAP_SEARCH_FAILED', 39);                     //
define ('CURLE_LIBRARY_NOT_FOUND', 40);                     //
define ('CURLE_FUNCTION_NOT_FOUND', 41);                     //
define ('CURLE_ABORTED_BY_CALLBACK', 42);                     //
define ('CURLE_BAD_FUNCTION_ARGUMENT', 43);                     //
define ('CURLE_BAD_CALLING_ORDER', 44);                     //
define ('CURLE_HTTP_PORT_FAILED', 45);                     //
define ('CURLE_BAD_PASSWORD_ENTERED', 46);                     //
define ('CURLE_TOO_MANY_REDIRECTS', 47);                     //
define ('CURLE_UNKNOWN_TELNET_OPTION', 48);                     //
define ('CURLE_TELNET_OPTION_SYNTAX', 49);                     //
define ('CURLE_OBSOLETE', 50);                     //
define ('CURLE_SSL_PEER_CERTIFICATE', 51);                     //
define ('CURLE_GOT_NOTHING', 52);                     //
define ('CURLE_SSL_ENGINE_NOTFOUND', 53);                     //
define ('CURLE_SSL_ENGINE_SETFAILED', 54);                     //
define ('CURLE_SEND_ERROR', 55);                     //
define ('CURLE_RECV_ERROR', 56);                     //
define ('CURLE_SHARE_IN_USE', 57);                     //
define ('CURLE_SSL_CERTPROBLEM', 58);                     //
define ('CURLE_SSL_CIPHER', 59);                     //
define ('CURLE_SSL_CACERT', 60);                     //
define ('CURLE_BAD_CONTENT_ENCODING', 61);                     //
define ('CURLE_LDAP_INVALID_URL', 62);                     //
define ('CURLE_FILESIZE_EXCEEDED', 63);                     //
define ('CURLE_FTP_SSL_FAILED', 64);                     //
define ('CURLPROXY_HTTP', 0);                     //
define ('CURLPROXY_SOCKS4', 4);                     //
define ('CURLPROXY_SOCKS5', 5);                     //
define ('CURL_NETRC_OPTIONAL', 1);                     //
define ('CURL_NETRC_IGNORED', 0);                     //
define ('CURL_NETRC_REQUIRED', 2);                     //
define ('CURL_HTTP_VERSION_NONE', 0);                     //
define ('CURL_HTTP_VERSION_1_0', 1);                     //
define ('CURL_HTTP_VERSION_1_1', 2);                     //
define ('CURLM_CALL_MULTI_PERFORM', -1); //This is not really an error. It means you should call curl_multi_perform again without doing select() or similar in between. Before version 7.20.0 this could be returned by curl_multi_perform, but in later versions this return code is never used. 
define ('CURLM_OK', 0);                     //
define ('CURLM_BAD_HANDLE', 1);                     //
define ('CURLM_BAD_EASY_HANDLE', 2);                     //
define ('CURLM_OUT_OF_MEMORY', 3);                     //
define ('CURLM_INTERNAL_ERROR', 4);                     //
define ('CURLMSG_DONE', 1);                     //
{% endhighlight %}

### curl 方法

#### curl_multi_select - 待所有cURL批处理中的活动连接

阻塞直到cURL批处理连接中有活动连接。 
`int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )`

{% highlight php startinline %}  

{% endhighlight %}

#### curl_multi_select - 运行当前 cURL 句柄的子连接

处理在栈中的每一个句柄。无论该句柄需要读取或写入数据都可调用此方法。 
`int curl_multi_exec ( resource $mh , int &$still_running )`
mh              由 curl_multi_init() 返回的 cURL 多个句柄。
still_running   一个用来判断操作是否仍在执行的标识的引用。


[php curl_multi_select 死循环原因及相应处理办法](http://blog.marchtea.com/archives/109)